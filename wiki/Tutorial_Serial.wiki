=<font color="red">draft</font>=
=Tutorial : Using Serial devices=
PySerial is very good multi-platform Serial library but offers many useless features when making communication between a Pi and electronic components like Arduino.

WebIOPi allows to use Serial devices natively without PySerial. It uses a lightweight driver instead, dedicated to electronic interfacing, and shares a common abstraction with I2C and SPI drivers. So you will found the same write & read functions on all three interfaces.

Serial driver also allows a RAW access directly with the REST API and so with the Javascript client library. This is only intended to be used with full-text Serial protocols, not for low-level and binary interfacing, for which macros still remains the best option.

You can use the WebIOPi Serial driver with the onboard UART as well as USB adapters. For exemple, you can can connect an Arduino through the USB port or by wiring headers.

This tutorials will learn you how to configure and use the embedded Serial driver from the REST API as well as Python scripts.

If you prefer PySerial, you can use it inside WebIOPi macros, but you will not benefit from the REST binding and the Serial Monitor.

==On-Board UART Prerequisites==
If you want to use the Serial UART from the GPIO Header, you first need to disable few things, because it is used for boot debugging by default.

First, edit */etc/inittab*, and comment the last line adding a sharp (#) at the beginning.

For example :
{{{
#Spawn a getty on Raspberry Pi serial line
T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100
}}}

Become :
{{{
#Spawn a getty on Raspberry Pi serial line
#T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100
}}}

Save, then edit */boot/cmdline.txt* and remove reference to *ttyAMA0*.

For example :
{{{
dwc_otg.lpm_enable=0 console=tty1 console=ttyAMA0,115200 kgdboc=ttyAMA0,115200 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait
}}}

Become :
{{{
dwc_otg.lpm_enable=0 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait
}}}
*Save, and reboot* your Raspberry Pi. As you may already understood, *ttyAMA0* refers to the on-board Serial UART available through the GPIO header.

==USB Serial Prerequisite==
Before using your USB Serial adapter, you need to find out its name.

===Arduino UNO Identification===
Right after plugged your Arduino Uno through USB, you can use *dmesg* to find out the tty name :
{{{
$ dmesg | tail
[66434.568197] usb 1-1.2: new full-speed USB device number 4 using dwc_otg
[66434.686656] usb 1-1.2: New USB device found, idVendor=2341, idProduct=0043
[66434.686694] usb 1-1.2: New USB device strings: Mfr=1, Product=2, SerialNumber=220
[66434.686713] usb 1-1.2: Manufacturer: Arduino (www.arduino.cc)
[66434.686730] usb 1-1.2: SerialNumber: 64131383231351B0E1C2
[66434.783078] cdc_acm 1-1.2:1.0: ttyACM0: USB ACM device
[66434.787401] usbcore: registered new interface driver cdc_acm
[66434.787434] cdc_acm: USB Abstract Control Model driver for USB modems and ISDN adapters
}}}
Take note of lasts lines, one include a tty name : *ttyACM0*.

===Arduino (OLD) / FDTI Identification===
Right after plugged your old Arduino through USB or any FTDI USB based, you can use *dmesg* to find out the tty name :
{{{
$ dmesg | tail
[66840.068515] usbserial: USB Serial support registered for FTDI USB Serial Device
[66840.068886] ftdi_sio 1-1.2:1.0: FTDI USB Serial Device converter detected
[66840.069446] usb 1-1.2: Detected FT232RL
[66840.069476] usb 1-1.2: Number of endpoints 2
[66840.069496] usb 1-1.2: Endpoint 1 MaxPacketSize 64
[66840.069517] usb 1-1.2: Endpoint 2 MaxPacketSize 64
[66840.069534] usb 1-1.2: Setting MaxPacketSize 64
[66840.071949] usb 1-1.2: FTDI USB Serial Device converter now attached to ttyUSB0
}}}
We can found here the tty name on the very last line : *ttyUSB0*.

===Listing tty files (generic)===
Use *ls* command with the wildcard/star character to find tty names :
{{{
$ ls /dev/tty*
/dev/tty
/dev/tty0
/dev/tty1
...
/dev/ttyACM0
/dev/ttyAMA0
/dev/ttyprintk
/dev/ttyUSB0
}}}
Here we can see linux terminals (ttyN), as well as serial interfaces :
  * *ttyACM0 :* Arduino UNO
  * *ttyAMA0 :* On-board UART/GPIO
  * *ttyUSB0 :* Arduino (old)/FTDI

==WebIOPi Serial configuration==
Configuring WebIOPi for Serial access is very easy once you know the tty name. Edit */etc/webiopi/config*, and in *[DEVICES]* section, add one of following line depending on your Serial interface.
{{{
[DEVICES]
serial = Serial device:ttyAMA0 baudrate:9600
uno = Serial device:ttyACM0 baudrate:9600
ftdi = Serial device:ttyUSB0 baudrate:9600
}}}
The most important is to match the device name with the tty name you found earlier. You can then use any name you want before the equal (=) symbol. You can also change the baudrate to match your device baudrate.

Save and start webiopi foreground in debug mode, you should see the Serial REST binding.
{{{
$ sudo webiopi -d -c /etc/webiopi/config
...
2014-01-12 17:32:51 - WebIOPi - INFO - Serial - Serial(/dev/ttyAMA0, 9600bps) mapped to REST API /devices/serial
...
}}}

==Fast On-Board UART test==
The quickest way to test the On-Board GPIO is to loop TX to RX using either a wire or a jumper ! When you write a data, you will receive it so you can read them back. When using the Serial monitor all data sent will be displayed back in the input area.
<p align="center">http://trouch.com/wp-content/uploads/2014/01/serialloopback.jpg</p>